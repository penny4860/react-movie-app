{"version":3,"sources":["Movie.js","App.js","registerServiceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","large_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","console","log","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wUAgCA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAqBzBC,MAtDf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACfL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBCkDbC,6MA1DbC,MAAQ,KAQRC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACLxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,kBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAStBoB,gCAAc,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSb,EAAKc,WADd,OACNb,EADMU,EAAAI,KAEZf,EAAKgB,SAAS,CACZf,WAHU,wBAAAU,EAAAM,SAAAT,EAAAU,WAOdJ,SAAW,WAQT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFArC1BP,KAAKX,8CAwCE,IACCN,EAAWiB,KAAKpB,MAAhBG,OAIR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9BA,EAASiB,KAAKnB,gBAAkB,kBA5DvB6B,aCEZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThB,KAAK,SAAAoB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,WAK1BnB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBH,MAAM,SAAAsB,GACLpB,QAAQoB,MAAM,4CAA6CA,KC1DjEC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SDQlC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,oCAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMnB,EAAK,GAAAoB,OAAMH,oCAAN,sBAENxB,EAwCX,SAAiCO,GAE/BjB,MAAMiB,GACHhB,KAAK,SAAAqC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM1C,KAAK,SAAAoB,GACjCA,EAAauB,aAAa3C,KAAK,WAC7BW,OAAOC,SAASgC,aAKpB7B,EAAgBC,KAGnBZ,MAAM,WACLE,QAAQC,IACN,mEAzDAsC,CAAwB7B,GAHxBD,EAAgBC,MCvBxB8B","file":"static/js/main.f66fff45.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n// Component class 에 state가 없고, props 만 있을 경우,\r\n// function으로 바꾸고, props를 parameter로 전달받자.\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>   \r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis=' ...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n// Functional component 도 propTypes를 지정할 수 있다.\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes ={\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\n// Component class 구현방법\r\n//  1. import react\r\n//  2. component class 구현\r\n//  3. render() 구현\r\nclass App extends Component {\r\n\r\n  // Component lifecycle\r\n  //  1. Render: componentWillMount() -> render() -> componentDidMount()\r\n  //    * Component instance 생성할 때, 위 순서대로 함수가 실행\r\n  //  2. Update componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\r\n  //    * Application 의 상태(props/stats)가 변경될 때\r\n\r\n  state = {}\r\n\r\n  // render() 실행 이후 5초후에 state 를 update\r\n  // state가 update 되었으므로 다시 render() 가 실행된다.\r\n  componentDidMount(){\r\n    this._getMovies();\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map(movie => {\r\n      return <Movie \r\n        title={movie.title_english}\r\n        poster={movie.large_cover_image} \r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n      />\r\n    })\r\n    return movies\r\n  }\r\n\r\n  // _getMovies를 비동기 함수로 구현\r\n  //    1) 비동기함수는 이전 코드의 완료여부와 관계없이 수행 : API 받아오는 등의 작업에 적합\r\n  //    2) await : async 함수 내부에 await 라인은 반드시 끝나야 다음 라인이 실행된다.\r\n  _getMovies =  async () => {\r\n    const movies = await this._callApi()\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n\r\n    //fetch() : 외부 API를 promise 객체를 리턴받는다. (비동기처리)\r\n    //  then : fetch가 끝난 이후 내용을 구현\r\n    //  catch : fetch가 제대로 안되었을 때의 예외처리를 구현\r\n    //arrow function\r\n    //  potato => potato.json()\r\n    //  function(argument) {return argument.json()}\r\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\r\n    .then(potato => potato.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err))\r\n  }\r\n  \r\n  render() {\r\n    const { movies } = this.state;\r\n\r\n    // state가 비었으면 \"Loading\"\r\n    // state가 있으면 함수를 실행\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n        {movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// index.js : 다른 component를 rendering 하는 역할\r\n//  1. 다른 component 를 불러오는 방법\r\n//      1) component의 class 를 import\r\n//      2) \"<App />\" 로 componet class 를 사용\r\n\r\n// ReactDOM 이 \"App\" 이라는 component 를 index.html에 <root>에 rendering\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}